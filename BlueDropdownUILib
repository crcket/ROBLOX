local lib = {}
local MainGUI = Instance.new("ScreenGui")


local ToggleButton = Instance.new("TextButton")
local UICorner_4 = Instance.new("UICorner")
local ToggleStatus = Instance.new("TextLabel")
local UICorner_5 = Instance.new("UICorner")
local TextInput = Instance.new("TextBox")
local UICorner_6 = Instance.new("UICorner")
local ActionsButton = Instance.new("TextButton")
local UICorner_000 = Instance.new("UICorner")


MainGUI.Name = "MainGUI"
MainGUI.Parent = gethui()
MainGUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local SubSection = {}

local function makeDraggable(frame)
    -- Variables for tracking mouse movement and frame position
    local dragging = false
    local dragInput
    local startPos
    local startMousePos
    local userInputService = game:GetService("UserInputService")

    -- Function to start dragging
    local function onDragStart(input)
        dragging = true
        startPos = frame.Position
        startMousePos = input.Position
    end

    -- Function to update the position as the mouse moves
    local function onDragMove(input)
        if dragging then
            local delta = input.Position - startMousePos
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end

    -- Function to stop dragging
    local function onDragEnd()
        dragging = false
    end

    -- Connect events to start, move, and stop dragging
    frame.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            onDragStart(input)
        end
    end)

    -- Use UserInputService to track mouse movement in a more reliable way
    userInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            onDragMove(input)
        end
    end)

    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            onDragEnd()
        end
    end)
end


lib.MakeContainer = function(Settings: {})
	if not Settings.Name then
		warn(`Missing essential setting (string) \{Name = text\}`)
	end
	
	local Container = Instance.new("Frame")
	local Sect1 = Instance.new("Frame")
	local UICorner = Instance.new("UICorner")
	local SubSect1 = Instance.new("ScrollingFrame")
	local UICorner_2 = Instance.new("UICorner")
	local closeButton = Instance.new("TextButton")
	local TitleSect = Instance.new("TextLabel")	
	local UIListLayout = Instance.new("UIListLayout")
	
	
	Container.Name = "Container"
	Container.Parent = MainGUI
	Container.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Container.BackgroundTransparency = 1.000
	Container.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Container.BorderSizePixel = 0
	Container.Position = UDim2.new(0.024, 0, 0, 0)
	Container.Size = UDim2.new(1, 0, 1, 0)

	Sect1.Name = "Sect1"
	Sect1.Parent = Container
	Sect1.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	Sect1.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Sect1.BorderSizePixel = 0
	Sect1.Size = UDim2.new(0, 150, 0, 30)
	Sect1.Active = true

	UICorner.CornerRadius = UDim.new(0, 2)
	UICorner.Parent = Sect1

	SubSect1.Name = "SubSect1"
	SubSect1.Parent = Sect1
	SubSect1.Active = false
	SubSect1.BackgroundColor3 = Color3.fromRGB(17, 17, 17)
	SubSect1.BorderColor3 = Color3.fromRGB(0, 0, 0)
	SubSect1.BorderSizePixel = 0
	SubSect1.Position = UDim2.new(0, 0, 1, 0)
	SubSect1.Size = UDim2.new(0, 150, 0, 330)
	SubSect1.ScrollBarThickness = 5

	UIListLayout.Parent = SubSect1
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.Padding = UDim.new(0, 3)

	UICorner_2.CornerRadius = UDim.new(0, 2)
	UICorner_2.Parent = SubSect1

	TitleSect.Name = "TitleSect"
	TitleSect.Parent = Sect1
	TitleSect.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TitleSect.BackgroundTransparency = 1.000
	TitleSect.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TitleSect.BorderSizePixel = 0
	TitleSect.Size = UDim2.new(1, 0, 1, 0)
	TitleSect.Font = Enum.Font.Code
	TitleSect.Text = Settings.Name
	TitleSect.TextXAlignment = Enum.TextXAlignment.Left
	TitleSect.TextColor3 = Color3.fromRGB(255, 255, 255)
	TitleSect.TextScaled = true
	TitleSect.TextSize = 14.000
	TitleSect.TextStrokeTransparency = 0.000
	TitleSect.TextWrapped = true

	closeButton.Parent = Sect1
	closeButton.Position = UDim2.new(0.75, 0, 0, 0)
	closeButton.Size = UDim2.new(0.25, 0, 1, 0)
	closeButton.Text = "X"
	closeButton.TextStrokeTransparency = 0
	closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	closeButton.BorderSizePixel = 0
	closeButton.BackgroundTransparency = 1
	closeButton.Font = Enum.Font.Code
	closeButton.TextScaled = true

	makeDraggable(Sect1)

    closeButton.MouseButton1Down:Connect(function()
        MainGUI:Destroy()
    end)
    
	return Container, setmetatable({ SectionInstance = SubSect1 }, { __index = SubSection })
end
SubSection.MakeButton = function(self, Settings : {})
	if not Settings.Name then
		warn("Missing setting: Name")
	end
	if not Settings.CallbackFunction then
		warn("Missing setting: CallbackFunction")
	end
	local ActionButton = Instance.new("TextButton")
	local UICorner_3 = Instance.new("UICorner")


	ActionButton.Name = "ActionButton"
	ActionButton.Parent = self.SectionInstance
	ActionButton.BackgroundColor3 = Color3.fromRGB(66,155,251)
	ActionButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ActionButton.BorderSizePixel = 0
	ActionButton.Size = UDim2.new(0, 150, 0, 30)
	ActionButton.Font = Enum.Font.Code
	ActionButton.TextColor3 = Color3.fromRGB(255,255,255)
	ActionButton.TextScaled = true
	ActionButton.TextSize = 14.000
	ActionButton.TextWrapped = true
	ActionButton.Text = Settings.Name

	UICorner_3.CornerRadius = UDim.new(0, 2)
	UICorner_3.Parent = ActionButton

	ActionButton.MouseButton1Click:Connect(Settings.CallbackFunction)
end
SubSection.MakeToggle = function(self,Settings : {})
	if not Settings.Name then
		warn(`Missing essential setting (string) \{Name = text\}`)
	end
	if not Settings.CallbackFunction then
		warn(`Missing essential setting (function) \{CallbackFunction = func\}`)
	end
	ToggleButton.Name = "ToggleButton"
	ToggleButton.Parent = self.SectionInstance
	ToggleButton.BackgroundColor3 = Color3.fromRGB(66,155,251)
	ToggleButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ToggleButton.BorderSizePixel = 0
	ToggleButton.Position = UDim2.new(0, 0, 0.106060609, 0)
	ToggleButton.Size = UDim2.new(0, 120, 0, 30)
	ToggleButton.Font = Enum.Font.Code
	ToggleButton.TextColor3 = Color3.fromRGB(255,255,255)
	ToggleButton.TextScaled = true
	ToggleButton.TextSize = 14.000
	ToggleButton.TextWrapped = true
	ToggleButton.Text = Settings.Name

	UICorner_4.CornerRadius = UDim.new(0, 2)
	UICorner_4.Parent = ToggleButton

	ToggleStatus.Name = "ToggleStatus"
	ToggleStatus.Parent = ToggleButton
	ToggleStatus.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
	ToggleStatus.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ToggleStatus.BorderSizePixel = 0
	ToggleStatus.Position = UDim2.new(1.00999999, 0, 0, 0)
	ToggleStatus.Size = UDim2.new(0, 30, 0, 30)
	ToggleStatus.Font = Enum.Font.Code
	ToggleStatus.Text = " "
	ToggleStatus.TextColor3 = Color3.fromRGB(0, 0, 0)
	ToggleStatus.TextSize = 14.000

	UICorner_5.CornerRadius = UDim.new(0, 4)
	UICorner_5.Parent = ToggleStatus
	local bool = false
	local function fire()
		bool = not bool
		if bool then 
			ToggleStatus.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
		else
			ToggleStatus.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
		end
		pcall(Settings.CallbackFunction,bool)
	end
	ToggleButton.MouseButton1Click:Connect(fire)
end

return lib
